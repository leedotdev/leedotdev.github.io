---
layout: post
title: 4년차 개발자의 회고
image: 20210722-1.jpg
date: 2021-07-22 22:00:00 +0900
tags: [rest, work]
categories: retrospect
---

안녕하세요. 저는 2018년 일본의 부동산 정보 제공 서비스　LIFULL homes의 개발자로 3년 4개월이라는 짧은 경험을 하고
최근, 한국으로 귀국하게 되었습니다.
한국에서의 새로운 도전에 앞서, 지금까지의 경험을 회고를 통해 돌아보고자 합니다.

---

## 일본으로의 취업
저는 한국의 전문대학을 졸업하고, 학교를 통해 일본으로 취업하게 되었습니다.  
학교 덕에, 많은 기업들의 면접을 볼 수 있었고, 면접에서 가장 많은 사람을 만나 볼 수 있었으며, 만나 뵌 모든 사람이 좋은 사람이라 생각된 회사에 입사하게 되었습니다.

일본 취업을 생각하게 된 이유는, 당시 제가 가진 실력으로 갈 수 있는 가장 좋은 선택지(급여,생활,성장) 가 일본이라고 생각했으며,   
당시의 그 선택은 옳았다고 생각하고 있습니다.

---

## 회사 생활
2018.04 일본 도쿄에서 회사생활을 시작하였습니다.  
회사의 분위기는 면접 때와 크게 다르지 않았으며, "좋은 사람"이 정말 많았습니다.

### 첫 프로젝트에서의 깨달음
운이 좋게도, 사내에서 가장 주목받는 프로젝트에 참가하게 되었습니다.  
메인 서비스가 20년이란 세월이 흐르면서 코드베이스가 거대해지고, 레거시한 부분으로 인해 생산성이 떨어졌기에
이를 해결하고자, 리팩토링이 아닌 새로운 개발 프로세스, 기술로 처음부터 다시 만들기 위해 회사의 정예멤버들이 모여있었습니다.  
프로젝트 오너, 매니져, 테크리더, 멤버 모두가 자신의 전문분야에 대한 지식이 뛰어난 것은 물론, 커뮤니케이션 능력도 출중하였기에, 프로젝트는 물 흐르듯 잘 흘러갔으며, 덤으로 첫 프로젝트였기에 의욕이 과다했을진 몰라도 빨리 출근 하고싶을 정도로 재미있게 일을 할 수 있었습니다.  
하지만, 아쉽게도 회사의 전략이 바뀜으로써 프로젝트는 중지되었고, 팀원들은 본래 자신의 그룹으로 돌아가게되었습니다.  
6개월간의 짧은 경험이었지만 이 프로젝트로 부터 "출근하고 싶어지는", "함께 일하고 싶은" 팀, 사람이 되고싶다는 생각을 갖게 되었으며, 그에 대한 고민은 아직도 계속 되고 있습니다.

### 성능 튜닝 프로젝트
첫 프로젝트가 중지 된 후, 본래의 그룹으로 돌아가 메인 서비스의 성능 개선 팀에 들어가게 되었습니다.  
하지만, 팀의 멤버중에 메인 서비스에 대해 바삭한 사람이 없었기에, 서비스의 함수 콜스택 시각화 부터 하기로 했습니다.  
당시 떠오르던 모니터링 솔루션인 Datadog을 채택하여, APM을 통해 함수의 콜스택과 분산 추적을 시각화하였고,
쉽게 1+1 문제나, 불 필요한 처리, caching을 통해 꽤나 훌륭하게 성능 개선을 이루어낼 수 있었습니다.  
또한, Datadog의 APM을 일시적으로 사용하는게 아닌, 다른 개발자들이 쉽게 자신의 환경에서 사용할 수 있도록 하고
개발시에 주기적으로 성능을 모니터링 하도록 권고 하였는데, 이것은 잘 사용되지 않았으며, 지켜지지도 않았던 것 같습니다.  
팀에서 잘 되지 않았던 이유에 대해 회고하는 시간을 가지진않았지만 개인적으로 느꼈던 점은  
아무리 유용한 툴을 만들었더라도, 그것이 효과적으로 사내에 알리지 않으면 의미가 없다는 것과
개발 가이드라인, 규칙을 추가하는데 있어서 신중해야 된 다는 것과, 별개의 이야기이지만 무시해도 될 것(수십개의 Lint의 지적, 코드 Quality에 대한 지적 등)이라면, 추가하느니만 못하다 라는 것입니다.

### 전사 어플리케이션 실행 기반(KEEL)
나에게 있어서 가장 뜻 깊은 프로젝트였습니다.  
시간이 흐름에 따라 메인 서비스의 코드베이스가 거대해져갔고, 그로인해 생산성, 유지보수 속도가 눈에 띄게 저하되어갔습니다.  
수년전, Cloud전환과 동시에 Microservice화를 통해 서비스를 적절한 단위로 분리하여 개발팀의 분업화를 이루어냈습니다.  
하지만, 서비스의 분리로 인한 Logging, monitoring, CI/CD등 바퀴의 재발명이라는 새로운 과제가 보이기 시작했으며 이를 해결하고자 
전사 어플리케이션 실행 기반이라는 프로젝트가 시작되게 되었습니다.  
당시 저는 Backend 엔지니어에 가까운 포지션이였지만, 기반,플랫폼에 관심이 있었기에 주기적인 상사와의 면담에서 관심이 있다는 것을 적극적으로 어필했습니다. 
그 결과 운이좋게도, 시작한지 얼마 되지않은 이 프로젝트에 2번째 멤버로써 조인하게 되었습니다.  
전사 어플리케이션 기반은 Kubernetes와 CNCF를 중심으로한 Kubernetes 생태계로 이루어져있었습니다.  
당시 관심만 있었지 아무런 지식이 없는 상태였기에, 상당히 많은 것을 알아야만 했지만,
프로젝트의 첫번째 멤버이자, 존경하며, 나에게 많은 것을 깨닫게 해주신 선배 덕분에 필요한 지식을 빠르게 습득하며 업무에 적응해 갔습니다.  
아래는 선배,팀원과의 이야기속에서 깨달은 몇가지의 좋은 조언들 입니다.

- 신뢰하는 source로 부터 정보를 얻을 것.
  필요한 모든 정보는 공식 Document, Github에서 얻을 수 있다.
  
  사실, 이 말을 듣기 전까지는 google 검색을 통해 stack overflow, 개인 blog 등에서 필요한 정보를 얻곤 했습니다.  
  늘 그곳에서 올바른 정보를 습득할 수 있다면 좋겠지만, 그렇지 못한 경우도 많았고
  무엇보다도, 나만의 문제일지도 모르지만 stack overflow, 개인 blog의 여러 해결책을 자세히 읽어보지 않고 copy paste만 함으로써
  문제는 해결하더라도, 본질적인 것은 하나도 이해하지 못하는 경우가 많았습니다.
  
  이 말을 듣고 난 후, 새로운 지식을 습득하고자 할때는 공식 Document만 보려고 노력했으며,
  문제가 발생 했을때는 Github issue에서 모든 것을 해결하려고 노력했습니다.  
  Github Issue의 좋은점은 많은 Open source의 issue template에서는
  문제를 재연하기 위한 상황이나, version정보 등 다양한 정보를 기입하도록 해 놓기 때문에 문제에 대한 적절한 대처법, 논의가 이루어집니다.  
  그로인해 본질적인 문제를 쉽게 이해할 수 있고, 그 과정에서 설계 사상 등의 부수적인 정보를 얻는 경우도 많아 여러모로 많이 도움이 되고 있는 것 같습니다.  
  또한, 많은 사람들이 Github Issue를 참고하는 만큼 정보를 한 곳에 집약할 수 있기도 합니다.  

  여담이지만, Kubernetes.io의 거의 모든 글을 읽어본 덕인지, 호기심에 쳐본 CKA, CKAD, CKS를 별다른 공부 없이 취득할 수 있었습니다. :)

- 회사는 배움의 장이기보다는, 내가 가진 지식을 발휘하는 곳
  
  성장하고 싶다면 회사의 경험도 물론 중요하지만, 개인적인 시간에 어떻게 성장하는가가 더 중요하다는 말에 가깝다고 생각합니다.  
  이때부터, 개인적인 시간을 어떻게 활용하여 나의 가치를 올릴 것인가를 생각해 보게 되었습니다.  

- 모든 답은 "잘" 생각하면 나온다.
  
  문제를 해결하기 위해 10시간 20시간 집중해서 고민해 본 적이 있는가?  
  적어도 저는 없었던 것 같습니다. 남은 올해, 내년에는 더 잘 생각할 수 있게 되기위해 노력합니다.  

- 두번 이상 해야 할 일이라면 자동화를 하는게 낫다
  
  맞다. 똑같은 일을 두번 이상 할 필요는 없다.  
  자동화를 통한 생산성 향상을 겪어 봄으로써, 자동화 이전에는 깨닫지 못했던 사소한 반복 행동, 업무들이 상당수 없어지게 되었습니다.  

- 모든 것을 알고 있을 필요는 없다. 필요한 지식을 필요할 때에 습득 할 수 있으면 된다.
  
  물론, 필요한 지식을 필요할 때에 습득 하기 위해서는, 배경지식이 많이 필요합니다.  
  하지만, 지금 당장 필요하지 않은 지식을 습득하기위해 시간을 낭비하지 마라는 뜻으로 이해하고 있으며,
  무언가를 학습할 때 "지금 당장 이것을 알아야하는가?, 왜 필요한가?" 라고 한번 더 생각해 보게 되었습니다.

- 인류는 Comp(1일 필요 영양소를 섭취가능한 젤리형태의 완전식, 먹는데 5분이면 충분하다)를 먹는 것으로 충분하다.
  
  농담이지만, 밥먹는 시간마저 최적화하여 자신의 가치를 향상시키기 위해 고민, 행동하는 선배를보며,  
  선배와의 격차를 줄이기는 불가능에 가깝다고 생각했습니다..

존경하는 팀원들에게 많은 가르침을 받고, 또 어깨너머로 보며 많은 것을 배워나갔습니다.  
프로젝트는 순조롭게 진행되었으며, 최근에는 팀원이 5명까지 늘어나고, 메인 서비스 대부분을 전사 어플리케이션 실행 기반으로 migration하게 되었습니다.  

팀원들과도 다양한 분야에서 많은 고민을 해왔는데, 인상깊었던 몇가지를 적어보려고 합니다.

- 상시 zoom접속
코로나로 인해 재택근무가 권장되어 모두가 재택근무를 하게되었습니다.  
재택근무로 인해 즉각적인 피드백이나 커뮤니케이션에 생기는 문제를 해결하기 위해 우리팀은 "상시 zoom 접속"을 시도하기로 했습니다.
물론 아래와 같은 규칙 아닌 규칙을 정하기도 했습니다.
1. 상대방의 카메라가 꺼져있을 때는 자리에 없는 것으로 생각한다. 
1. 마이크는 기본적으로 꺼 놓으며, 말을 할 때만 켠다.
1. 휴식, 팀 업무와 관련되지 않은 것을 하고있을 때, 집중하고 싶을때 등 팀원들과 원활한 커뮤니케이션을 취하지 못할 상황에서는 언제든지 카메라를 끄거나, zoom을 나가도 좋다.
 
결과, 언제든지 질문과 논의, 잡담이 가능하게 되었기에 개개인의 output속도의 향상은 물론, 재택근무의 어려움중 하나인 소통의 단절은 커녕  
팀원들간의 잦은 잡담(주로 기술적인 잡담이였다)으로 더욱 더 친밀해지는 효과를 볼 수 있었습니다. 
또한, 별도의 zoom의 breakout room을 활용하지 않고, 모두가 한 공간에 모여있었기 때문에 특정 멤버들간의 대화가 팀원 모두에게 공유되는 장점도 있었습니다.

저는 본래 재택근무에 회의적인 입장이였습니다. 
나 자신도 "재택근무를 하면 근무에 집중하지 못해, 업무 효율성이 떨어질 것이다" 라고 생각했는데, 내가 고용주, 매니저인 입장에서 사원, 팀원들을 믿을 수 있을까?
하지만, 상시 zoom 접속이라는 업무방식을 통해 재택근무로도 충분히 성과를 낼 수 있음을 경험함으로써, 긍적적으로 바뀌었습니다.  

물론, 팀원 모두가 늘 생산성 향상을 의식하고 있었고, 상시 zoom 접속이라는 상대적으로 심리적 부담감이 높은 방식에 거부감이 없었기에 이러한 업무형태가 가능했다고 생각합니다.
이 외에도 우리팀은 zoom에서 겪는 최소한의 스트레스 조차 없애기 위해 회선, 마이크와 같은 장비에도 투자를 아끼지 않았습니다.


- 미팅 없음
최근 1,2년간 나의 회사 스케줄에는 미팅이 거의 없었습니다.  
같은 팀은 물론, 다른 팀과의 협업이 필요할 때도 시간을 정해두고 하는 미팅은 없었습니다.  
프로젝트 초기에 회의가 없었던 것은 아닙니다. 다른 오피스에서 근무하는 팀원이 합류했을때 Catch up을 돕기위한 고정적인 스터디시간이나,  
팀원이 늘어남에따라 서로의 Task를 공유하고 업무상담을 위한 짧은 아침회의 등이 있었습니다.
하지만, 이러한 미팅이 정말 필요한 것 인가? 에대해 의문을 가진 팀원이 있었고, 의문에대해 논의한 결과 아래와 같은 결론을 도출했습니다.

"무언가를 말해야하는 시간이 정해져있으면, 그 때까지 말하지 못 할 가능성이 있다.  
이것은 생산성 저하의 요인이 된다.
우리가 지향하는 바를 이루기 위해서는, 물어보고 싶은 것, 전하고 싶은 것은 언제든지 말 할 수 있어야한다."

결과, 모든 미팅은 사라졌고, 질문, 논의, 상담 등 모든 것이 바로바로 그 자리에서 이루어지게 되었습니다.
이것은 다른 팀과의 커뮤니케이션에도 적용이되었고, 궁금한 것이나 논의하고싶은게 있는 타 팀원은 우리팀의 zoom으로 들어와 궁금증을 해결하고 나갔습니다.


- 예외를 두지 않기
업무를 원활하게 하기 위해 Issue의 적절한 작성 단위, Task의 진행상황의 정리, Review의 흐름 등 몇가지의 규칙이 존재합니다.  
여기서 다른 팀원이 기존의 규칙과는 조금 다른 행위를 할 경우, 팀에서는 다른 행위를 한 이유를 반드시 물어보고
더 좋은 방향으로 가는 행위였다면 기존의 규칙을 변경하며, 그렇지 않은 경우는 일관성 유지를 환기시켜주었습니다.(주로 나였다)
이를 통해, 모든 팀원이 일관된 형식으로 일을 처리하였고, 이는 task관리, 정보공유, 장애처리 등의 다양한 영역에서 상당히 도움이 되었습니다.

---

좋은 회사, 재미있는 프로젝트, 훌륭한 팀원 들과 함께한 덕에 개발자로써는 물론, 사람으로써 많이 성장할 수 있었습니다.  
한국으로의 이직이 확정되고, 마지막 출근일 지금까지 함께 해 온 많은 분들이 새로운 직장에서의 도전을 응원해 주셨습니다.

---

## 회사외의 생활

### 어플리케이션 성능 튜닝 대회 ISUCON참여
신입사원 시절 사내에서 개최한 어플리케이션 성능 튜닝 대회에 참여한 적이 있었는데, 8시간이란 시간동안 별다른 성능개선을 이루어내지 못한 체 대회를 마무리 했었습니다.  
이를 계기로 일본 LINE에서 매년 ISUCON이란 어플리케이션 성능 튜닝 대회를 개최한다는 것을 알게되었고 ISUCON8 부터 매년 참가하고있습니다. ( 올해는 ISUCON11 )  
아직까지 단 한번도 예산을 통과한 적이 없지만, 매년 등수는 올라가고있고 올해는 예선통과에 근접 해 보고싶습니다 
(2020.9월 468팀 중 148위)

여담으로, 2년차때도 사내 어플리케이션 성능 튜닝 대회가 개최되었는데, 비공식이지만 2위를 했습니다. (12팀 중)  
비공식인 이유는 Ruby로 된 어플리케이션을 열심히 튜닝 했지만, 초기 golang으로 설정된 언어설정을 바꾸어놓지 않아 벤치마크가 golang의 어플리케이션을 계측 해 버렸습니다.

[isucon 공식 Blog(일본어)](https://isucon.net/) ( 구글 번역으로 충분히 읽을 수 있다. )

### Community 활동
이제 와서이지만, 저는 프로그래밍에는 자신이 없습니다.
필요한 것, 업무에 필요한 것은 만들어 낼 수 있지만, 아직 잘 짜여진 코드, 스스로 만족하는 코드를 짜 본 적이 없습니다.  
최근 2년간 Kubernetes를 중심으로한 Open source project를 많이 접하면서, 저도 무언가 공헌하고 싶다는 생각을 많이했습니다.  
하지만 Contribute 할 기회가 있었음에도 불구하고, 코드에 자신이 없다는 이유로 미루기 일쑤였습니다.
언제까지나 피할수는 없기에, 코드에 Contribute하는게 아닌 다른 방식으로라도 공헌하고자 했는데 그것이 Community활동이였습니다.
Kubernetes slack에는 이미 130,000명의 개발자가 참여를 하고있고 매일 수 많은 질문들이 올라옵니다.  
그 중에는 제가 답할 수 있는 것도 상당히 많았기에, 지금은 생각날때마다 Slack에서 질의응답을 하곤 합니다.  

---

## 마지막

지금까지 몇번이고 포기했던 글쓰기를 마쳤다는 것에서 조금 더 성장했음을 느낍니다. 
하지만, 역시 글은 생각처럼 잘 써지지 않았고 앞으로 많은 노력이 필요함을 깨달았습니다.
글쓰기 실력을 갈고 닦아 다음번엔 더 잘쓴 글로 만나 뵙겠습니다.
